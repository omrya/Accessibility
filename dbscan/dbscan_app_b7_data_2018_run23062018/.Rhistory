shiny::runApp()
runApp()
shiny::runApp('C:/Accessibility/dbscan/dbscan_app_b7_data_2017')
library(magrittr)
library(sp)
library(rgeos)
library(dbscan)
library(factoextra)
dat = read.csv("origin_times_wgs84.csv", stringsAsFactors = FALSE) # Read CSV
head(dat)
dupl = duplicated(dat[, c("lon", "lat")]) #
dupl
dat = dat[!dupl, ]
dupl
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
box = bbox(dat)
dat = spTransform(dat, "+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
pnt = dat
pnt
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = input$eps, minPts = input$minPts)
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = 20, minPts = 5)
plot(res)
res
pnt$clus = res$cluster
pnt$clus[pnt$clus == 0] = NA
pnt
pnt_l = split(pnt(), pnt()$clus)
pnt$clus[pnt$clus == 0] = NA
pnt_l = split(pnt(), pnt()$clus)
dbscan::kNNdistplot(dat, k =  5)
dbscan::kNNdistplot(coordinates(pnt), k =  5)
shiny::runApp()
dbscan::kNNdistplot(coordinates(pnt), k =  5)
abline(h = 0.15, lty = 2)
dbscan::kNNdistplot(coordinates(pnt), k =  5)
dbscan::kNNdistplot(coordinates(pnt), k =  10)
abline(h = 0.15, lty = 2)
abline(h = 100, lty = 2)
dbscan::kNNdistplot(coordinates(pnt), k =  1)
dbscan::kNNdistplot(coordinates(pnt), k =  100)
dbscan::kNNdistplot(coordinates(pnt), k = 5)
abline(h = 100, lty = 2)
wd
getwd()
setwd("C:/Accessibility/dbscan/dbscan_app_b7_data_2017")
dat = read.csv("origin_times_wgs84.csv", stringsAsFactors = FALSE) # Read CSV
dupl = duplicated(dat[, c("lon", "lat")]) #
dat = dat[!dupl, ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
box = bbox(dat)
dat = spTransform(dat, "+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
pnt = dat
dbscan::kNNdistplot(coordinates(pnt), k = 5)
abline(h = 100, lty = 2)
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = 100, minPts = 5)
fviz_cluster(pnt, data = pnt, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput(
"eps", "Epsilon",
min = 10, max = 1000, value = 20, step = 10
),
sliderInput(
"minPts", "Min. Points",
min = 5, max = 100, value = 5, step = 5
)
)
)
fviz_cluster(pnt, data = pnt, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(pnt), data = pnt, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(pnt), data = res, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(res), data = res, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
res
?fviz_cluster
fviz_cluster(coordinates(pnt), data = res, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(pnt), data = NULL, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(res, data = NULL, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(res), data = NULL, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(coordinates(pnt), data = NULL, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(res, data = NULL, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
fviz_cluster(res, data = coordinates(pnt), stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
?fviz_cluster
data("multishapes", package = "factoextra")
df <- multishapes[, 1:2]
set.seed(123)
db <- fpc::dbscan(df, eps = 0.1, MinPts = 5)
fviz_cluster(db, data = df, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
db
df
db <- fpc::dbscan(df, eps = 0.1, MinPts = 5)
dbscan::kNNdistplot(df, k =  5)
abline(h = 0.15, lty = 2)
fviz_cluster(res, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
coordinates(pnt)
fviz_cluster(res, data = coordinates(pnt), stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
getwd()
runApp('C:/Accessibility/dbscan/dbscan_app_b7_data_2018')
setwd("C:/Accessibility/dbscan/dbscan_app_b7_data_2018")
runApp()
runApp('C:/Accessibility/dbscan/dbscan_app_b7_data_2017')
runApp()
getwd()
dat = read.csv("origin_times_wgs84.csv", stringsAsFactors = FALSE) # Read CSV
dupl = duplicated(dat[, c("lon", "lat")]) #
dat = dat[!dupl, ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
box = bbox(dat)
dat = spTransform(dat, "+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
pnt = dat
dbscan::kNNdistplot(coordinates(pnt), k = 5)
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = 100, minPts = 5)
Print DBSCAN
Print(db)
print(db)
setwd("C:/Accessibility/dbscan/dbscan_app_b7_data_2017")
getwd()
dat = read.csv("origin_times_wgs84.csv", stringsAsFactors = FALSE) # Read CSV
dupl = duplicated(dat[, c("lon", "lat")]) #
dat = dat[!dupl, ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
box = bbox(dat)
dat = spTransform(dat, "+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
pnt = dat
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = 100, minPts = 5)
print(db)
print(res)
getwd()
setwd("C:/Accessibility/dbscan/dbscan_app_b7_data_2018")
getwd()
dat = read.csv("origin_times_wgs84.csv", stringsAsFactors = FALSE) # Read CSV
dupl = duplicated(dat[, c("lon", "lat")]) #
dat = dat[!dupl, ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
box = bbox(dat)
dat = spTransform(dat, "+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
pnt = dat
res = dbscan::dbscan(cbind(coordinates(pnt), pnt$mean * 166.6667), eps = 100, minPts = 5)
print(res)
runApp()
runApp('C:/Accessibility/dbscan/dbscan_app_b7_data_2017')
