if(length(unique(SIRIdf$date)) > 1){
print(paste("SIRI data frame contained ", length(unique(SIRIdf$date)), "dates, the one with most values was used"  ))
datet <- data.frame(table(SIRIdf$date))
SIRIdf <- SIRIdf[SIRIdf$date == datet$Var1[which.max(datet$Freq)],]
SIRIdf$RecordedAtTime <- SIRItoPOSIXct(SIRIdf$RecordedAtTime, round = FALSE)
SIRIdf$OriginAimedDepartureTime <- SIRItoPOSIXct(SIRIdf$OriginAimedDepartureTime)
SIRIdf$ExpectedArrivalTime <- SIRItoPOSIXct(SIRIdf$ExpectedArrivalTime)
SIRIdf$AimedArrivalTime <- SIRItoPOSIXct(SIRIdf$AimedArrivalTime)
SIRIdf$key <-paste(SIRIdf$request_id,SIRIdf$OriginAimedDepartureTime, SIRIdf$VehicleRef, sep = " ; ")
SIRIdf$BUS_XY <- ifelse(is.na(SIRIdf$Longitude) | is.na(SIRIdf$Latitude), NA,  paste(SIRIdf$Longitude, SIRIdf$Latitude, sep = " , "))
trips <- GTFStrips[GTFStrips$route_id %in% SIRIdf$LineRef,]
cal <- GTFScalendar[GTFScalendar$service_id %in% trips$service_id,]
week <- c("Sunday","Monday","Tuesday","Wednesday", "Thursday","Friday", "Saturday" )
colnames(cal)[2:8] <- week
cal[,9:10] <- sapply(cal[,9:10], as.character)
cal[,9] <- as.Date(cal[,9], format = "%Y%m%d")
cal[,10] <- as.Date(cal[,10], format = "%Y%m%d")
cal <- cal[cal$start_date <= as.Date(SIRIdf$RecordedAtTime[1])& as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date,]
if(cal$start_date[1] <= as.Date(SIRIdf$RecordedAtTime[1]) & as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date[1] & NROW(cal) >=1 ){
c1 <- cal[,weekdays(SIRIdf$RecordedAtTime[1]) == colnames(cal)[2:8]]
if(class(c1) == "data.frame"){
t1 <- t[t$service_id %in% c1$service_id,]
}else{
c2 <- cal[c1 == 1,]
t1 <- trips[trips$service_id %in% c2$service_id,]
}
st <- GTFSstop_times[GTFSstop_times$trip_id %in% t1$trip_id & GTFSstop_times$stop_sequence == 1,]
ch <- unique(as.character(strptime(SIRIdf$OriginAimedDepartureTime, "%H:%M:%S")))
SIRIdf <- left_join(SIRIdf, st, by = c("time" = "arrival_time"))
SIRIdf <- SIRIdf[,-which(names(SIRIdf) %in% c("weekday", "time", "date", "stop_id", "stop_sequence", "pickup_type", "drop_off_type", "shape_dist_traveled"))]
SIRIdf <- SIRIdf[order(SIRIdf$request_id,SIRIdf$OriginAimedDepartureTime ,SIRIdf$VehicleRef,SIRIdf$BUS_XY, rev(SIRIdf$RecordedAtTime),SIRIdf$VehicleAtStop ),]
SIRIdf <- SIRIdf[!is.na(SIRIdf$LineRef),]
SIRIdf
}else{print("SIRI date does not match the loaded GTFS")}
}else{
SIRIdf$RecordedAtTime <- SIRItoPOSIXct(SIRIdf$RecordedAtTime, round = FALSE)
SIRIdf$OriginAimedDepartureTime <- SIRItoPOSIXct(SIRIdf$OriginAimedDepartureTime)
SIRIdf$ExpectedArrivalTime <- SIRItoPOSIXct(SIRIdf$ExpectedArrivalTime)
SIRIdf$AimedArrivalTime <- SIRItoPOSIXct(SIRIdf$AimedArrivalTime)
SIRIdf$key <-paste(SIRIdf$request_id,SIRIdf$OriginAimedDepartureTime, SIRIdf$VehicleRef, sep = " ; ")
SIRIdf$BUS_XY <- ifelse(is.na(SIRIdf$Longitude) | is.na(SIRIdf$Latitude), NA,  paste(SIRIdf$Longitude, SIRIdf$Latitude, sep = " , "))
trips <- GTFStrips[GTFStrips$route_id %in% SIRIdf$LineRef,]
cal <- GTFScalendar[GTFScalendar$service_id %in% trips$service_id,]
week <- c("Sunday","Monday","Tuesday","Wednesday", "Thursday","Friday", "Saturday" )
colnames(cal)[2:8] <- week
cal[,9:10] <- sapply(cal[,9:10], as.character)
cal[,9] <- as.Date(cal[,9], format = "%Y%m%d")
cal[,10] <- as.Date(cal[,10], format = "%Y%m%d")
cal <- cal[cal$start_date <= as.Date(SIRIdf$RecordedAtTime[1])& as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date,]
if(cal$start_date[1] <= as.Date(SIRIdf$RecordedAtTime[1]) & as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date[1] & NROW(cal) >=1){
c1 <- cal[,weekdays(SIRIdf$RecordedAtTime[1]) == colnames(cal)[2:8]]
if(class(c1) == "data.frame"){
t1 <- t[t$service_id %in% c1$service_id,]
}else{
c2 <- cal[c1 == 1,]
t1 <- trips[trips$service_id %in% c2$service_id,]
}
st <- GTFSstop_times[GTFSstop_times$trip_id %in% t1$trip_id & GTFSstop_times$stop_sequence == 1,]
ch <- unique(as.character(strptime(SIRIdf$OriginAimedDepartureTime, "%H:%M:%S")))
SIRIdf <- left_join(SIRIdf, st, by = c("time" = "arrival_time"))
SIRIdf <- SIRIdf[,-which(names(SIRIdf) %in% c("weekday", "time", "date", "stop_id", "stop_sequence", "pickup_type", "drop_off_type", "shape_dist_traveled"))]
SIRIdf <- SIRIdf[order(SIRIdf$request_id,SIRIdf$OriginAimedDepartureTime ,SIRIdf$VehicleRef,SIRIdf$BUS_XY, rev(SIRIdf$RecordedAtTime),SIRIdf$VehicleAtStop ),]
SIRIdf <- SIRIdf[!is.na(SIRIdf$LineRef),]
SIRI <- SIRIdf[!duplicated(SIRIdf$key),]
SIRI
}else{print("SIRI date does not match the loaded GTFS")}
}
}
}
##########
#download gtfs files for israel
downloadGTFSil <- function(directory){
directory <- choose.dir()
date <- Sys.Date()
date <- as.character(as.POSIXct(strptime(date, format = "%Y-%m-%d")))
file_name <- as.character(paste("GTFS",date,".zip", sep = ""))
download.file("ftp://gtfs.mot.gov.il/israel-public-transportation.zip", destfile = paste0(directory,file_name), method = "libcurl")}
##############
# load all the GTFS files into a list of data frames,
# requires no arguments,
# you simply need to select the direcory in which the GTFS .txt files are in
loadGTFS <- function(directory){
directory <- choose.dir()
origwd <- getwd()
setwd(directory)
temp = list.files(pattern="*.txt")
list2env(
lapply(setNames(temp, make.names(paste0("GTFS",gsub("*.txt$", "", temp)))),
read.csv,stringsAsFactors = FALSE, encoding = 'UTF-8', header = TRUE, quote = ""), envir = .GlobalEnv)
GTFSagency$agency_nameENG[GTFSagency$agency_id == 2] <- "Rail"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 3] <- "Egged"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 4] <- "Egged_Taavura"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 5] <- "Dan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 6] <- "Nazareth-unbs"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 7] <- "NTT"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 8] <- "GB-Tours"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 10] <- "Mo'atza Ezorit Eilot"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 14] <- "Netiv Expres"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 15] <- "Metropoline"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 16] <- "Superbus"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 18] <- "Kavim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 19] <- "Metrodan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 20] <- "Karmelit"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 21] <- "CityPass"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 23] <- "Galim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 24] <- "Mo'atza Ezorit Golan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 25] <- "Afikim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 30] <- "Dan Tzafon"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 31] <- "Dan BaDarom"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 32] <- "Dan Be'er Sheva"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 42] <- "Jerusalem-Ramllah Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 44] <- "Jerusalem-AbuTur-Anta Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 45] <- "Jerusalem-Alawast Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 47] <- "Jerusalem-Har Hazeitim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 49] <- "Jerusalem-Issawia'a-Shuaafat Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 50] <- "Jerusalem Darom Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 51] <- "Jerusalem Tzur Baer Ihud"
setwd(origwd)
}
########################
# for this next function you'll need the GTFS files and an organized SIRI data frame, if the GTFS tables were lodad with loadGTFS() then the only thing need to be defined is the SIRI data frame
#########   use StopsForSIRI instead  #####################
Stops4SIRI <- function(SIRI, stops = GTFSstops, routes = GTFSroutes, trips = GTFStrips, stoptimes = GTFSstop_times ){
SIRIroutes <- routes[routes$agency_id %in% SIRI$OperatorRef & routes$route_short_name %in% SIRI$PublishedLineName & routes$route_type %in% SIRI$DirectionRef,]
SIRItrips <- trips[trips$route_id %in% SIRIroutes$route_id,]
SIRIstop_times <- stoptimes[stoptimes$trip_id %in% SIRItrips$trip_id,]
SIRIstops <- stops[GTFSstops$stop_id %in% SIRIstop_times$stop_id,]
}
#################
# for this next function you'll need the GTFS files and an organized SIRI data frame, if the GTFS tables were lodad with loadGTFS() then the only thing neede to be defined is the SIRI data frame
#  function to get the stops data for one line.
# will accept only a SIRI dataframe for one line.
#  replacable by stopstoILTM
StopsForSIRI <- function(SIRI, stops = GTFSstops){
if(length(unique(SIRI$LineRef))>1){
print("ERROR: SIRI file contains more then one LineRef, there should only be 1 unique LineRef")
}else{
stops[which(stops$stop_code %in% SIRI$StopPointRef, arr.ind = TRUE),]
}
}
###############
#  creates a spatialpointsdataframe object from SIRI data.
#  column names are set to SIRI dataframe column names
SIRItoILTM <- function(SIRIdf, epsg = NULL){
if(is.null(epsg) == TRUE){
require(sp)
require(rgdal)
SIRIdf <- SIRIdf[!is.na(SIRIdf$Longitude),]
proj = make_EPSG()
israelTM <- CRS("+proj=tmerc +lat_0=31.73439361111111 +lon_0=35.20451694444445 +k=1.0000067 +x_0=219529.584 +y_0=626907.39 +ellps=GRS80 +towgs84=-48,55,52,0,0,0,0 +no_defs")
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(as.numeric(as.character(SIRIdf$Longitude)),as.numeric(as.character(SIRIdf$Latitude))),data = SIRIdf,proj4string = crs1)
s <- spTransform(s, israelTM)
} else{
require(sp)
require(rgdal)
SIRIdf <- SIRIdf[!is.na(SIRIdf$Longitude),]
proj = make_EPSG()
crs2 <- CRS(proj$prj4[proj$code == epsg])
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(as.numeric(as.character(SIRIdf$Longitude)),as.numeric(as.character(SIRIdf$Latitude))),data = SIRIdf,proj4string = crs1)
s <- spTransform(s, crs2)
}
}
###############
# A more generic version of SIRItoILTM where you can choose which coordinate system
# you want to use.
SIRItoSP <- function(SIRIdf, epsg){
require(sp)
require(rgdal)
SIRIdf <- SIRIdf[!is.na(SIRIdf$Longitude),]
proj = make_EPSG()
crs2 <- CRS(proj$prj4[proj$code == epsg])
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(SIRIdf$Longitude,SIRIdf$Latitude),data = SIRIdf,proj4string = crs1)
s <- spTransform(s, crs2)
}
################
# make sure that all of the necessary GTFS files are loaded
# if you want to use a specific line and not just transform the points to spatialPoints:
# useSIRI should be TRUE and SIRI should be the SIRI dataframe of the line\area you want to use
stopstoILTM <- function(GTFSstops, useSIRI = FALSE, SIRI = NULL){
require(sp)
require(rgdal)
StopsForSIRI <- function(SIRI, stops = GTFSstops){
if(length(unique(SIRI$LineRef))>1){
print("ERROR: SIRI file contains more then one LineRef, there should only be 1 unique LineRef")
}else{
stops[which(stops$stop_code %in% SIRI$StopPointRef, arr.ind = TRUE),]
}
}
if(useSIRI == FALSE & is.null(SIRI)){
GTFSstops <- GTFSstops[!is.na(GTFSstops$stop_lon),]
proj = make_EPSG()
israelTM <- CRS("+proj=tmerc +lat_0=31.73439361111111 +lon_0=35.20451694444445 +k=1.0000067 +x_0=219529.584 +y_0=626907.39 +ellps=GRS80 +towgs84=-48,55,52,0,0,0,0 +no_defs")
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(GTFSstops$stop_lon,GTFSstops$stop_lat),data = GTFSstops,proj4string = crs1)
s <- spTransform(s, israelTM)
} else{
GTFSstops <- GTFSstops[!is.na(GTFSstops$stop_lon),]
GTFSstops <- StopsForSIRI(SIRI = SIRI, stops = GTFSstops)
proj = make_EPSG()
israelTM <- CRS("+proj=tmerc +lat_0=31.73439361111111 +lon_0=35.20451694444445 +k=1.0000067 +x_0=219529.584 +y_0=626907.39 +ellps=GRS80 +towgs84=-48,55,52,0,0,0,0 +no_defs")
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(GTFSstops$stop_lon,GTFSstops$stop_lat),data = GTFSstops,proj4string = crs1)
s <- spTransform(s, israelTM)
}
}
# A more generic version of stopstoILTM where you can choose which coordinate system
# you want to use.
stopstoSP <- function(GTFSstops,epsg ,useSIRI = FALSE, SIRI = NULL){
require(sp)
require(rgdal)
StopsForSIRI <- function(SIRI, stops = GTFSstops){
if(length(unique(SIRI$LineRef))>1){
print("ERROR: SIRI file contains more then one LineRef, there should only be 1 unique LineRef")
}else{
stops[which(stops$stop_code %in% SIRI$StopPointRef, arr.ind = TRUE),]
}
}
if(useSIRI == FALSE & is.null(SIRI)){
GTFSstops <- GTFSstops[!is.na(GTFSstops$stop_lon),]
proj = make_EPSG()
crs2 <- CRS(proj$prj4[proj$code == epsg])
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(GTFSstops$stop_lon,GTFSstops$stop_lat),data = GTFSstops,proj4string = crs1)
s <- spTransform(s, crs2)
} else{
GTFSstops <- GTFSstops[!is.na(GTFSstops$stop_lon),]
GTFSstops <- StopsForSIRI(SIRI = SIRI, stops = GTFSstops)
proj = make_EPSG()
crs2 <- CRS(proj$prj4[proj$code == epsg])
crs1 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
s <- SpatialPointsDataFrame(coords = data.frame(GTFSstops$stop_lon,GTFSstops$stop_lat),data = GTFSstops,proj4string = crs1)
s <- spTransform(s, crs2)
}
}
####################
# Calculates the distance to the nearest stop for each row of SIRISpatialPointsDataFrame,
# accepts two SpatialPointsDataFrame objects, one for SIRI data and one for Stops unique to that SIRI data.
NearestStop <- function(SIRIspdf , Stopsspdf){
require(sp)
require(rgdal)
require(dplyr)
if(class(SIRIspdf) != "SpatialPointsDataFrame" | class(Stopsspdf) != "SpatialPointsDataFrame" ){
print("ERROR: Both SIRIspdf and Stopsspdf must be  S4 'SpatialPointsDataFrame' type objects")
} else {
n <- spDists(SIRIspdf,spstops)
n <- data.frame(n)
colnames(n) <- spstops@data$stop_code
nn <- data.frame(c(apply(n,1, which.min)), apply(n,1,min))
colnames(nn) <- c("nearest:index","distance")
s1 <- data.frame(1:(length(spstops@coords)/2),spstops@coords, spstops@data$stop_code, spstops@data$stop_id)
colnames(s1) <- c("index","stop_lon", "stop_lat", "stop_code", "stop_id_s" )
nn <- left_join(x = nn,y = s1, by =c ("nearest:index" = "index"))
SIRIspdf@data <- cbind(SIRIspdf@data, nn)
SIRIspdf
}
}
############
# not recomended since all other function use df names from loadGTFS()
loadGTFSfromZIP <- function(fns){
fns <- unzip(zipfile = file.choose())
list2env(setNames(object = lapply(fns, read.csv, encoding = 'UTF-8'),nm = make.names(paste0("GTFS",substr(gsub("*.txt$", "", fns),3, 20 )))), globalenv())
GTFSagency$agency_nameENG[GTFSagency$agency_id == 2] <- "Rail"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 3] <- "Egged"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 4] <- "Egged_Taavura"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 5] <- "Dan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 6] <- "Nazareth-unbs"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 7] <- "NTT"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 8] <- "GB-Tours"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 10] <- "Mo'atza Ezorit Eilot"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 14] <- "Netiv Expres"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 15] <- "Metropoline"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 16] <- "Superbus"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 18] <- "Kavim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 19] <- "Metrodan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 20] <- "Karmelit"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 21] <- "CityPass"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 23] <- "Galim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 24] <- "Mo'atza Ezorit Golan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 25] <- "Afikim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 30] <- "Dan Tzafon"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 31] <- "Dan BaDarom"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 32] <- "Dan Be'er Sheva"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 42] <- "Jerusalem-Ramllah Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 44] <- "Jerusalem-AbuTur-Anta Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 45] <- "Jerusalem-Alawast Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 47] <- "Jerusalem-Har Hazeitim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 49] <- "Jerusalem-Issawia'a-Shuaafat Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 50] <- "Jerusalem Darom Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 51] <- "Jerusalem Tzur Baer Ihud"
}
############################
# load today's GTFS directly from URL
loadGTFSfromURL <- function(){
temp <- tempfile()
download.file("ftp://gtfs.mot.gov.il/israel-public-transportation.zip", destfile = temp, method = "libcurl")
fns <- unzip(zipfile = temp)
list2env(setNames(object = lapply(fns, read.csv, encoding = 'UTF-8'),nm = make.names(paste0("GTFS",substr(gsub("*.txt$", "", fns),3, 20 )))), globalenv())
unlink(temp)
GTFSagency$agency_nameENG[GTFSagency$agency_id == 2] <- "Rail"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 3] <- "Egged"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 4] <- "Egged_Taavura"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 5] <- "Dan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 6] <- "Nazareth-unbs"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 7] <- "NTT"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 8] <- "GB-Tours"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 10] <- "Mo'atza Ezorit Eilot"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 14] <- "Netiv Expres"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 15] <- "Metropoline"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 16] <- "Superbus"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 18] <- "Kavim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 19] <- "Metrodan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 20] <- "Karmelit"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 21] <- "CityPass"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 23] <- "Galim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 24] <- "Mo'atza Ezorit Golan"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 25] <- "Afikim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 30] <- "Dan Tzafon"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 31] <- "Dan BaDarom"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 32] <- "Dan Be'er Sheva"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 42] <- "Jerusalem-Ramllah Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 44] <- "Jerusalem-AbuTur-Anta Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 45] <- "Jerusalem-Alawast Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 47] <- "Jerusalem-Har Hazeitim"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 49] <- "Jerusalem-Issawia'a-Shuaafat Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 50] <- "Jerusalem Darom Ihud"
GTFSagency$agency_nameENG[GTFSagency$agency_id == 51] <- "Jerusalem Tzur Baer Ihud"
}
#########
# create second key to subset the SIRI dataframe
# requires the SIRIdf to be after all other stages
SIRIKeepClosestStop <- function(SIRIdf){
a <- SIRIdf[order(SIRIdf$OriginAimedDepartureTime ,SIRIdf$stop_code, SIRIdf$distance),]
a$key2 <- paste(a$OriginAimedDepartureTime," ", a$stop_code)
a$key3 <- paste(a$OriginAimedDepartureTime," ", a$stop_id)
b <- a[!duplicated(a$key2),]
b
}
##########################
# subset GTFSstop_times to save on memory while using ot to compare to SIRI
substoptimes <- function(SIRIdf, GTFSstop_times = GTFSstop_times,GTFSroutes = GTFSroutes){
t <- GTFStrips[GTFStrips$route_id %in% SIRIdf$LineRef,]
cal <- GTFScalendar[GTFScalendar$service_id %in% t$service_id,]
week <- c("Sunday","Monday","Tuesday","Wednesday", "Thursday","Friday", "Saturday" )
colnames(cal)[2:8] <- week
cal[,9:10] <- sapply(cal[,9:10], as.character)
cal[,9] <- as.Date(cal[,9], format = "%Y%m%d")
cal[,10] <- as.Date(cal[,10], format = "%Y%m%d")
cal <- cal[cal$start_date <= as.Date(SIRIdf$RecordedAtTime[1])& as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date,]
if(cal$start_date[1] <= as.Date(SIRIdf$RecordedAtTime[1]) & as.Date(SIRIdf$RecordedAtTime[1]) <= cal$end_date[1] & NROW(cal) >= 1){
c1 <- cal[,weekdays(SIRIdf$RecordedAtTime[1]) == colnames(cal)[2:8]]
if(class(c1) == "data.frame"){
t1 <- t[t$service_id %in% c1$service_id,]
st <- GTFSstop_times[GTFSstop_times$trip_id %in% t1$trip_id,]
st
}else{
c2 <- cal[c1 == 1,]
t1 <- t[t$service_id %in% c2$service_id,]
st <- GTFSstop_times[GTFSstop_times$trip_id %in% t1$trip_id,]
st
}
}
else{
print("SIRI does not match GTFS dates or day of week")
}
}
###########################
# needed for comparison between SIRI and stop times
organizeStopTimes <- function(Stimes = StimesforSIRI, SIRIdf3 = SIRIdf3){
s2 <- Stimes
x <- unique(s2$trip_id)
y <- s2$arrival_time[s2$stop_sequence == 1]
xx <- as.data.frame(table(s2$trip_id))
xx$Var2 <- y
depart_firststr <- rep(xx$Var2,xx$Freq)
if(length(depart_firststr) > 0){
s3 <- cbind(s2, depart_firststr)
s3$depart_firststr <- as.character(s3$depart_firststr)
s3$depart_first <- StopTimes2POSIXct(s3$depart_firststr,SIRIdf3)
s3$key <- paste(s3$depart_first," ", s3$stop_id)
s3$arrival_time <- StopTimes2POSIXct(s3$arrival_time,SIRIdf3)
s3$departure_time <- StopTimes2POSIXct(s3$departure_time,SIRIdf3)
s3 <- s3[!is.na(s3$arrival_time),]
s3
}else{
print('failed to subset stop times')
}
}
###########
# process the stop times df in order to use the times in it
#  warning, reqires 64 bit machine and 64 bit version of R.
# not recommended for use on the full df of GTFSstop_times
StopTimes2POSIXct <- function(column, SIRIref){
d <- column
time <- as.character(d)
date <- rep_len(as.character(as.Date(as.POSIXct(SIRIref$RecordedAtTime[1]))),length(time))
X <- paste(as.character(date)," ", as.character(time))
Y <- as.POSIXct(strptime(X,format = "%Y-%m-%d %H:%M:%S"))
Y
}
###############
# version of StopTimes2POSIXct for use in 32bit machines
# still might not work on entire GTFSstop_times
lowmemST2POSIX <- function(column, SIRIref){
s1 <- column
s2 <- as.Date(as.POSIXct(SIRIref$RecordedAtTime[1:length(column)]))
s2 <- as.character(s2)
s2 <- rep(s2[1],len = length(s1))
s3 <- s2[1:(length(s2)/2+1)]
s4 <- s2[length(s3):length(s2)]
s5 <- s1[1:(length(s1)/2+1)]
s6 <- s1[(length(s1)/2+1):length(s1)]
a1 <- paste0(s3, " ", s5)
a2 <- paste0(s4, " ", s6)
a3 <- (rbind(a1,a2))
a3 <- a3[1:(length(a3)-1)]
Y <- as.POSIXct(strptime(a3,format = "%Y-%m-%d %H:%M:%S"))
column <- Y
column <- column[-length(column)]
}
###############
# adding a trip number for the day
# will be used later for indexing
addtripnum <- function(ans2){
tripnum <- 1
tripnumvec <- vector()
ans2 <- ans2[order(ans2$OriginAimedDepartureTime,ans2$stop_sequence),]
ans2 <- ans2[!is.na(ans2$OriginAimedDepartureTime),]
for(ora in unique(ans2$OriginAimedDepartureTime[!is.na(ans2$OriginAimedDepartureTime)])){
if(length(ans2$OriginAimedDepartureTime[ans2$OriginAimedDepartureTime[!is.na(ans2$OriginAimedDepartureTime)] == ora]) > 0 ){
tripnumvec <-c(tripnumvec, rep_len(tripnum,length.out = length(ans2$OriginAimedDepartureTime[ans2$OriginAimedDepartureTime[!is.na(ans2$OriginAimedDepartureTime)] == ora]))  )
tripnum <- tripnum+1
}else{
tripnum <- tripnum+1
}
}
tripnumvec <- tripnumvec
ans2 <- cbind(ans2,tripnumvec)
}
loadcsv_multi <- function(directory){
directory <- choose.dir()
setwd(directory)
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(paste0(gsub("*.csv$", "", temp)))),
read.csv,stringsAsFactors = FALSE, header = TRUE, quote = ""), envir = .GlobalEnv)
}
is.outlier <- function(spSIRI, trip){
siridfch <- gConvexHull(spSIRI[spSIRI@data$trip_id == trip,])
if(!is.null(siridfch)){
cent1 <- gCentroid(siridfch)
centbuffer <- gBuffer(cent1, width = 75)
outlier <- gWithin(spSIRI, centbuffer)
return(outlier)
}else{
print(paste('failed trip: ', trip))
}
}
#Dan Badarom = 31 (before the reform)
routes <- GTFSroutes[GTFSroutes$agency_id == 31,]
#All routes from Dan BS
install.packages("SIRItoGTFS")
SIRItoGTFS::readGTFS(data.table = F)
#Dan Badarom = 31 (before the reform)
routes <- GTFSroutes[GTFSroutes$agency_id == 31,]
head(routs)
head(routes)
View(GTFSagency)
#Dan Badarom = 31 (before the reform)
routes <- GTFSroutes[GTFSroutes$agency_id == 32,]
write.table(routes,"C:\\Accessibility_data\\gtfs_data\\routes.txt", sep = ",", row.names = FALSE)
#All trips among specifiec route
trips <- GTFStrips[GTFStrips$route_id %in% routes$route_id,]
write.table(trips,"C:\\Accessibility_data\\gtfs_data\\trips.txt", sep = ",", row.names = FALSE)
shapes <- GTFSshapes[GTFSshapes$shape_id %in% trips$shape_id,]
write.table(shapes,"C:\\Accessibility_data\\gtfs_data\\shapes.txt", sep = ",", row.names = FALSE)
#All
stop_times <- GTFSstop_times[GTFSstop_times$trip_id %in% trips$trip_id,]
write.table(stop_times,"C:\\Accessibility_data\\gtfs_data\\stop_times.txt", sep = ",", row.names = FALSE)
stops <- GTFSstops[GTFSstops$stop_id %in% stop_times$stop_id,]
#write.table(stops,"C:\\Analysis\\GIS\\gtfs_data\\israel-public-transportation_12072017_BSOnly\\stops1.txt", sep = ",", row.names = FALSE)
write.csv(stops,"C:\\Accessibility_data\\gtfs_data\\stops.txt",row.names = FALSE)
View(GTFScalendar)
View(GTFSshapes)
View(GTFStrips)
calendar <- GTFScalendar[GTFScalendar$service_id %in% trips$service_id,]
write.csv(stops,"C:\\Accessibility_data\\gtfs_data\\calendar.txt",row.names = FALSE)
routes
#All routes from Dan BS
install.packages("SIRItoGTFS")
#All routes from Dan BS
install.packages("SIRItoGTFS")
SIRItoGTFS::readGTFS(data.table = F)
#Dan Badarom = 31 (before the reform)
routes <- GTFSroutes[GTFSroutes$agency_id == 32,]
write.table(routes,"C:\\Accessibility_data\\gtfs_data\\routes.txt", sep = ",", row.names = FALSE)
#Dan Badarom = 31 (before the reform)
routes <- GTFSroutes[GTFSroutes$agency_id == 32,]
write.table(routes,"C:\\Accessibility_data\\gtfs_data\\routes.txt", sep = ",", row.names = FALSE)
#All trips among specifiec route
trips <- GTFStrips[GTFStrips$route_id %in% routes$route_id,]
write.table(trips,"C:\\Accessibility_data\\gtfs_data\\trips.txt", sep = ",", row.names = FALSE)
shapes <- GTFSshapes[GTFSshapes$shape_id %in% trips$shape_id,]
write.table(shapes,"C:\\Accessibility_data\\gtfs_data\\shapes.txt", sep = ",", row.names = FALSE)
stop_times <- GTFSstop_times[GTFSstop_times$trip_id %in% trips$trip_id,]
write.table(stop_times,"C:\\Accessibility_data\\gtfs_data\\stop_times.txt", sep = ",", row.names = FALSE)
stops <- GTFSstops[GTFSstops$stop_id %in% stop_times$stop_id,]
write.table(stops,"C:\\Accessibility_data\\gtfs_data\\stops.txt", sep = ",", row.names = FALSE)
calendar <- GTFScalendar[GTFScalendar$service_id %in% trips$service_id,]
write.csv(calendar,"C:\\Accessibility_data\\gtfs_data\\calendar.txt",row.names = FALSE)
